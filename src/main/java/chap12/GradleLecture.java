package chap12;import java.util.ArrayList;import java.util.List;import static java.util.stream.Collectors.joining;public class GradleLecture extends Lecture {	private List<Grade> grades;	public GradleLecture(int pass, String title, List<Integer> scores, List<Grade> grades) {		super(pass, title, scores);		this.grades = new ArrayList<>(grades);	}	/**	 * 부모와 자식의 signature 가 같은 경우, 자식의 우선순위가 높음.	 *  ---	 * 아마 대학교때 아래처럼 상속을 사용하긴 했다.	 * 무엇이 문제인가 ?	 * 기능의 확장 용도로 객체를 사용한것 ?  - 이정도의 확장은 괜찮은거 같은데	 * type 도 같은 의미이고 ...	 */	@Override public String evaluate() {		return super.evaluate() + " , " + gradesStatistics();	}	private String gradesStatistics() {		return grades.stream()			.map(this::format)			.collect(joining());	}	private String format(Grade grade) {		return String.format("%s:%d", grade.getName(), gradeCount(grade));	}	private long gradeCount(Grade grade) {		return getScores().stream()			.filter(grade::include)			.count();	}}